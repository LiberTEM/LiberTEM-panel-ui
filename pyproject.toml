[build-system]
requires = [
    "hatchling",
    "hatch-fancy-pypi-readme",
]
build-backend = "hatchling.build"

[project]
name = "libertem-ui"
dynamic = ["version", "readme"]
license = {file = "LICENSE"}
description="Panel+Bokeh-based GUI Toolkit for LiberTEM"
requires-python = ">=3.10"
authors = [
    { name = "the LiberTEM team", email = "libertem-dev@googlegroups.com" },
]
keywords=[
    "electron",
    "microscopy",
    "notebook",
    "gui",
]
classifiers=[
    'Development Status :: 3 - Alpha',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'License :: OSI Approved :: MIT License',
    'Operating System :: POSIX :: Linux',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: Microsoft :: Windows',
    'Environment :: Web Environment',
    'Environment :: Console',
]
dependencies = [
    "numpy",
    "numba",
    "scipy",
    "pandas",
    "scikit-image",
    "tifffile",
    "bokeh>=3.4.0",
    "panel>=1",
    "xarray",
    "datashader",
    "colorcet",
    "humanize",
    "bidict",
    "StrEnum",  # in stdlib from 3.11
    "typing_extensions",
]

[project.optional-dependencies]
libertem = [
    "libertem",
    "libertem-live",  # used for RecordUDF and SignalMonitorUDF
]
notebook = [
    "notebook",
    "ipython",
    "ipywidgets",
]

[project.urls]
Repository = "https://github.com/LiberTEM/LiberTEM-panel-ui"

[tool.hatch.version]
path = "src/libertem_ui/__version__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/LICENSE",
    "/README.rst",
    "/test_requirements.txt",
    "/tox.ini",
]
exclude = [
    "*.pyc",
    "*.nbi",
    "*.nbc",
    "__pycache__",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
"content-type" = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.rst"

[tool.coverage.run]
branch = true
include = [
    "src/"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain about typing branches:
    "if TYPE_CHECKING",
    "if typing.TYPE_CHECKING",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
]
