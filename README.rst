UDFs UI
=======

Window-based web GUI framework intended to support the
`LiberTEM <https://github.com/LiberTEM/LiberTEM/>`_
library for electron microscopy data analysis. The primary
usage environment is within a Jupyter Notebook.

Runs LiberTEM User Defined Functions (UDFs) in interactive
windows, to simplify adjusting parameters and exploring
data.

Capable of running certain analyses on top of the
`LiberTEM-live <https://github.com/LiberTEM/LiberTEM-live/>`_
framework, allowing for interactive live acquisitions
in a Jupyter Notebook.

There are two ways to use the framework, as standalone
analysis windows connected to a dataset, or through a
:code:`UIContext` window manager, which can be used to
dynamically add and remove windows as required.

The standalone case (where :code:`ctx`, :code:`ds` are
LiberTEM `Context` and `DataSet` objects):

.. code-block:: python

    from udfs_ui.windows.com import CoMImagingWindow
    # Create the window using a context and dataset
    com_window = CoMImagingWindow.using(ctx, ds)
    # Display the window itself
    com_window.layout()
    # Results from the window are stored in a 
    # dataframe-based results manager
    com_window.results_manager.layout()
    # Results in the manager can be extracted into
    # Python objects using methods
    result_id = '3kd9sn'
    rc = com_window.results_manager.get_result_container(result_id)
    assert isinstance(rc.data, np.ndarray)

A second standalone window can be linked to the first,
and will share the data and LiberTEM resources. Results from
both windows will appear in the same :code:`results_manager`.

.. code-block:: python

    from udfs_ui.windows.imaging import VirtualDetectorWindow
    # Create new window linked to the previous window
    v_window = VirtualDetectorWindow.linked_to(com_window)
    # Display the new window
    v_window.layout()

When two-or-more windows are linked, certain results can be displayed
in other windows to help navigate the data. For example, a log-sum over
all frames generated by the :code:`FrameImagingWindow` can be displayed
in the :code:`VirtualDetectorWindow` frame plot, to help parametrize an
annular darkfield analysis.

For a more tightly-integrated usage, the managed :code:`UIContext`
can dynamically add and remove windows, as well as run analyses
from multiple windows in parallel:

.. code-block:: python

    from udfs_ui import UIContext

    # Create the UIContext object
    # This orchestrates:
    #  - add/remove analysis windows
    #  - providing work to the LiberTEM Context
    #  - managing and saving results from analyses
    ui_context = UIContext.for_offline(ctx, ds)
    # Display main window for running analyses
    ui_context.layout()
    # Display table / dataframe-based results manager
    ui_context.results_manager.layout()

see :code:`examples/` for some more complete
example use cases.
